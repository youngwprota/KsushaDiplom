using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class TracingEvaluator : MonoBehaviour
{
    [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ TemplateDrawer (—ç—Ç–∞–ª–æ–Ω)")]
    public TemplateDrawer templateDrawer;

    [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ DrawingController")]
    public DrawingController drawingController;

    [Tooltip("–ü–æ—Ä–æ–≥ (–≤ —é–Ω–∏—Ç–∞—Ö) ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —à–∞–±–ª–æ–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –µ—ë –ø–æ–∫—Ä—ã—Ç–æ–π.")]
    public float coverThreshold = 0.25f;

    [Tooltip("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —à–∞–±–ª–æ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö (0..1).")]
    [Range(0f, 1f)]
    public float requiredCoverage = 0.85f;

    [Tooltip("UI —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).")]
    public TMP_Text resultText;

    void Start()
    {
        if (templateDrawer == null) templateDrawer = GetComponent<TemplateDrawer>();
        if (drawingController == null) drawingController = GetComponent<DrawingController>();
    }

    void OnStrokeFinished(object strokeObj)
    {
        List<Vector3> stroke = strokeObj as List<Vector3>;
        EvaluateStroke(stroke);
    }

    public void EvaluateStroke(List<Vector3> stroke)
    {
        Vector3[] template = templateDrawer.GetTemplatePoints();
        if (template == null || template.Length == 0)
        {
            ShowResult(false);
            return;
        }

        if (stroke == null || stroke.Count == 0)
        {
            ShowResult(false);
            return;
        }

        int covered = 0;
        for (int i = 0; i < template.Length; i++)
        {
            Vector3 t = template[i];
            bool isCovered = IsPointCovered(t, stroke, coverThreshold);
            if (isCovered) covered++;
        }

        float coverage = (float)covered / (float)template.Length;
        Debug.Log($"Coverage: {coverage:F2} ({covered}/{template.Length})");

        bool success = coverage >= requiredCoverage;
        ShowResult(success);
    }

    bool IsPointCovered(Vector3 templatePoint, List<Vector3> stroke, float threshold)
    {
        float sqrThresh = threshold * threshold;
        for (int i = 0; i < stroke.Count; i++)
        {
            if ((stroke[i] - templatePoint).sqrMagnitude <= sqrThresh) return true;
        }
        return false;
    }

    void ShowResult(bool success)
    {
        if (resultText != null)
        {
            resultText.text = success ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ" : "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë ‚ò∫Ô∏è";
        }

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é, –∑–≤—É–∫ –∏ —Ç.–¥.
    }

    // –í—ã–∑–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–Ω–æ–ø–∫–∞ Check)
    public void CheckCurrentStroke()
    {
        EvaluateStroke(drawingController.GetStrokePoints());
    }
}
